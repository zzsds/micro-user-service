// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/user/user.proto

package srv_user

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for User service

type UserService interface {
	Index(ctx context.Context, in *Pagination, opts ...client.CallOption) (*List, error)
	Show(ctx context.Context, in *ShowRequest, opts ...client.CallOption) (*ShowResponse, error)
	GetMobile(ctx context.Context, in *MobileRequest, opts ...client.CallOption) (*MobileResponse, error)
	MobileRegister(ctx context.Context, in *MobileRegisterRequest, opts ...client.CallOption) (*MobileRegisterResponse, error)
	ModifyPassword(ctx context.Context, in *ModifyPassRequest, opts ...client.CallOption) (*ModifyPassResponse, error)
	ResetPassword(ctx context.Context, in *ResetPassRequest, opts ...client.CallOption) (*ResetPassResponse, error)
	ModifyMobile(ctx context.Context, in *ModifyMobileRequest, opts ...client.CallOption) (*ModifyMobileResponse, error)
	PassLogin(ctx context.Context, in *PassLoginRequest, opts ...client.CallOption) (*PassLoginResponse, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) Index(ctx context.Context, in *Pagination, opts ...client.CallOption) (*List, error) {
	req := c.c.NewRequest(c.name, "User.Index", in)
	out := new(List)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Show(ctx context.Context, in *ShowRequest, opts ...client.CallOption) (*ShowResponse, error) {
	req := c.c.NewRequest(c.name, "User.Show", in)
	out := new(ShowResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetMobile(ctx context.Context, in *MobileRequest, opts ...client.CallOption) (*MobileResponse, error) {
	req := c.c.NewRequest(c.name, "User.GetMobile", in)
	out := new(MobileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) MobileRegister(ctx context.Context, in *MobileRegisterRequest, opts ...client.CallOption) (*MobileRegisterResponse, error) {
	req := c.c.NewRequest(c.name, "User.MobileRegister", in)
	out := new(MobileRegisterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ModifyPassword(ctx context.Context, in *ModifyPassRequest, opts ...client.CallOption) (*ModifyPassResponse, error) {
	req := c.c.NewRequest(c.name, "User.ModifyPassword", in)
	out := new(ModifyPassResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ResetPassword(ctx context.Context, in *ResetPassRequest, opts ...client.CallOption) (*ResetPassResponse, error) {
	req := c.c.NewRequest(c.name, "User.ResetPassword", in)
	out := new(ResetPassResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ModifyMobile(ctx context.Context, in *ModifyMobileRequest, opts ...client.CallOption) (*ModifyMobileResponse, error) {
	req := c.c.NewRequest(c.name, "User.ModifyMobile", in)
	out := new(ModifyMobileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) PassLogin(ctx context.Context, in *PassLoginRequest, opts ...client.CallOption) (*PassLoginResponse, error) {
	req := c.c.NewRequest(c.name, "User.PassLogin", in)
	out := new(PassLoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserHandler interface {
	Index(context.Context, *Pagination, *List) error
	Show(context.Context, *ShowRequest, *ShowResponse) error
	GetMobile(context.Context, *MobileRequest, *MobileResponse) error
	MobileRegister(context.Context, *MobileRegisterRequest, *MobileRegisterResponse) error
	ModifyPassword(context.Context, *ModifyPassRequest, *ModifyPassResponse) error
	ResetPassword(context.Context, *ResetPassRequest, *ResetPassResponse) error
	ModifyMobile(context.Context, *ModifyMobileRequest, *ModifyMobileResponse) error
	PassLogin(context.Context, *PassLoginRequest, *PassLoginResponse) error
}

func RegisterUserHandler(s server.Server, hdlr UserHandler, opts ...server.HandlerOption) error {
	type user interface {
		Index(ctx context.Context, in *Pagination, out *List) error
		Show(ctx context.Context, in *ShowRequest, out *ShowResponse) error
		GetMobile(ctx context.Context, in *MobileRequest, out *MobileResponse) error
		MobileRegister(ctx context.Context, in *MobileRegisterRequest, out *MobileRegisterResponse) error
		ModifyPassword(ctx context.Context, in *ModifyPassRequest, out *ModifyPassResponse) error
		ResetPassword(ctx context.Context, in *ResetPassRequest, out *ResetPassResponse) error
		ModifyMobile(ctx context.Context, in *ModifyMobileRequest, out *ModifyMobileResponse) error
		PassLogin(ctx context.Context, in *PassLoginRequest, out *PassLoginResponse) error
	}
	type User struct {
		user
	}
	h := &userHandler{hdlr}
	return s.Handle(s.NewHandler(&User{h}, opts...))
}

type userHandler struct {
	UserHandler
}

func (h *userHandler) Index(ctx context.Context, in *Pagination, out *List) error {
	return h.UserHandler.Index(ctx, in, out)
}

func (h *userHandler) Show(ctx context.Context, in *ShowRequest, out *ShowResponse) error {
	return h.UserHandler.Show(ctx, in, out)
}

func (h *userHandler) GetMobile(ctx context.Context, in *MobileRequest, out *MobileResponse) error {
	return h.UserHandler.GetMobile(ctx, in, out)
}

func (h *userHandler) MobileRegister(ctx context.Context, in *MobileRegisterRequest, out *MobileRegisterResponse) error {
	return h.UserHandler.MobileRegister(ctx, in, out)
}

func (h *userHandler) ModifyPassword(ctx context.Context, in *ModifyPassRequest, out *ModifyPassResponse) error {
	return h.UserHandler.ModifyPassword(ctx, in, out)
}

func (h *userHandler) ResetPassword(ctx context.Context, in *ResetPassRequest, out *ResetPassResponse) error {
	return h.UserHandler.ResetPassword(ctx, in, out)
}

func (h *userHandler) ModifyMobile(ctx context.Context, in *ModifyMobileRequest, out *ModifyMobileResponse) error {
	return h.UserHandler.ModifyMobile(ctx, in, out)
}

func (h *userHandler) PassLogin(ctx context.Context, in *PassLoginRequest, out *PassLoginResponse) error {
	return h.UserHandler.PassLogin(ctx, in, out)
}
